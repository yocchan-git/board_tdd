user系の処理
    テスト容易度:高 && 重要度:高
    -[x]htmlの基本構造を作る
        -[x]titleタグの中を「title | subtitle」みたいにする
            -[x]titleタグの中に「ログイン | 掲示板アプリ」などのタイトルを作りたい
        -[x]もし指定がなかったら「掲示板アプリ」というだけにする
        -[x]フラッシュメッセージが入っていたら表示する

    -[]右側（nav）のヘッダーを整える
        -[]ログイン時、自分の名前+ログアウトのリンク

        -[]ログアウト時、ログイン+サインアップのリンク

    -[]新規登録画面
        -[x]バリデーションエラー
            -[x]名前は空欄ダメ
            -[x]名前は50文字以上
            -[x]メアドは空欄
            -[x]メアドは250文字以上
            -[x]メアドは正規表現にマッチする
            -[x]メアドは大文字も小文字にする
            -[x]パスワードは空欄
            -[x]パスワード6文字以上
        -[x]エラーならrenderで元のビューを表示
            -[x]名前が空でpost通信したらrenderでビューに戻す
        -[x]posts一覧へリダイレクト
        -[x]フラッシュメッセージを表示する

    ※ログインのテストができなかった（調べてもわからないので質問してみる）
    -[]ログインの画面
        -[]正しければ、posts一覧へリダイレクト
        -[]フラッシュメッセージを表示する
        -[]正しくなければ、renderでビューを表示

    -[]ログアウトの処理を実装する
        -[x]delete通信で"logout"通信
        -[]セッションをリセットして、
        -[]フラッシュメッセージを入れて、
        -[]ログインページへリダイレクトをする。
        -[]@current_userを無効にする

    テスト容易度:低 && 重要度:低
    ・ログインボタンが押されたら
    ・DBと入力された値を比較
    ・正しいデータならDBに保存

post系の処理
    テスト容易度:高 && 重要度:高
    -[]投稿一覧ページを作成する(index)
        -[]タイトルは詳細ページのリンクになってる
        -[]自分の名前もリンクになっている
    -[]新規投稿機能を追加する(new,create)
        -[]バリデーション
        -[]OK→フラッシュメッセージと投稿一覧へリダイレクト
        -[]NG→renderでposts/newのビューに戻る
    -[]投稿詳細ページを作る(show)
    -[]投稿修正ページを追加する(edit,update)
        -[]バリデーション
        -[]フラッシュメッセージ
        -[]リダイレクトする
        -[]データベースを書き換える
    -[]投稿削除ページを作る(destroy)
        -[]フラッシュメッセージ
        -[]リダイレクト

    テスト容易度:低 && 重要度:低
    ・updated_at順に並べる
    ・DBから引っ張り出して表示する
    ・入力フォームにタイトルと内容のフォーム、hidden属性でuser_idを入力しておく
    ・下に編集、削除、戻るボタンの3つがある
    ・投稿したタイトルと内容を書いて、
    ・タイトルと内容を修正するフォームがある
    ・タイトルと内容は修正前のものが入力されている
